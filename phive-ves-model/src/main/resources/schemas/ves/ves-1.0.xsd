<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2023-2024 Philip Helger (www.helger.com)
    philip[at]helger[dot]com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
           xmlns="urn:com:helger:phive:ves:v1.0" 
           targetNamespace="urn:com:helger:phive:ves:v1.0"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified"
           version="1.0">
  <xs:annotation>
    <xs:documentation>
This XML Schema is used to describe "Validation Execution Sets" as used by the phive validation library.

Version: 2024-03-19
    </xs:documentation>
  </xs:annotation>

  <xs:group name="VesCoordinateGroup">
    <xs:annotation>
      <xs:documentation>This group defines the layout and the constraints of coordinates</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="groupId" type="xs:string">
        <xs:annotation>
          <xs:documentation>The group ID is something like a company or project ID</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="artifactId" type="xs:string">
        <xs:annotation>
          <xs:documentation>The artifact specifies something relative to a group. It must be unique within a group.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="version" type="xs:string">
        <xs:annotation>
          <xs:documentation>The version number of an artifact within a group. This MUST follow the semantic versioning principle.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:group>
 

  <xs:complexType name="VesNamespaceType">
    <xs:attribute name="prefix" type="xs:token" use="required">
      <xs:annotation>
        <xs:documentation>
          The namespace prefix to define. 
          The empty prefix is the default namespace mapping.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uri" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The namespace URI bound to the prefix</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="overwrite" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>
          Must be true if this namespace definition overwrites a previously defined one
          (MUST be either by prefix or by URI but NEVER both)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="VesNamespaceListType">
    <xs:sequence>
      <xs:element name="namespace" type="VesNamespaceType" minOccurs="1" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>At least one namespace declaration must be present.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="VesResourceType">
    <xs:sequence>
      <xs:group ref="VesCoordinateGroup">
        <xs:annotation>
          <xs:documentation>group, artifact, version</xs:documentation>
        </xs:annotation>
      </xs:group>
      <xs:element name="type" type="xs:string">
        <xs:annotation>
          <xs:documentation>The resource type that defines the file extension for the resource.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="VesErrorLevelType">
    <xs:restriction base="xs:token">
      <xs:enumeration value="info">
        <xs:annotation>
          <xs:documentation>Error level 'information' meaning no error anymore</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="warn">
        <xs:annotation>
          <xs:documentation>Error level 'warning' meaning a non-serious thing and validation may continue</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="error">
        <xs:annotation>
          <xs:documentation>Error level 'error' meaning a serious problem occurred and validation is considered failed</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="VesCustomErrorType">
    <xs:sequence>
      <xs:element name="id"    type="xs:string">
        <xs:annotation>
          <xs:documentation>ID of the error who's error level is to be modified</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="level" type="VesErrorLevelType">
        <xs:annotation>
          <xs:documentation>The adopted error level to assign to all found issues with the provided ID</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="VesOutputType">
    <xs:sequence>
      <xs:element name="customError" type="VesCustomErrorType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>This element allows to overwrite the error level of certain errors (make them more severe or less severe)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="VesRequiresType">
    <xs:annotation>
      <xs:documentation>
        Defines a "requires" dependency to a different VES
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- Required references -->
      <xs:group ref="VesCoordinateGroup"/>
      
      <!-- Customization parameter -->
      <xs:element name="namespaces" type="VesNamespaceListType" minOccurs="0" />
      <xs:element name="output" type="VesOutputType" minOccurs="0" />
    </xs:sequence>
    <xs:attribute name="stopOnError" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          If this attribute is true, the execution of the validation must stop here, 
          and the rules provided in this VES should not be executed at all.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  
  <xs:complexType name="VesXsdCatalogItemPublicType">
    <xs:sequence>
      <xs:element name="resource" type="VesResourceType">
        <xs:annotation>
          <xs:documentation>The target resource to redirect to.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="uri" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The namespace URI to rewrite</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  
  <xs:complexType name="VesXsdCatalogItemSystemType">
    <xs:sequence>
      <xs:element name="resource" type="VesResourceType">
        <xs:annotation>
          <xs:documentation>The target resource to redirect to.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The system ID to rewrite</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  
  <xs:complexType name="VesXsdCatalogType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="public" type="VesXsdCatalogItemPublicType">
        <xs:annotation>
          <xs:documentation>Contains a single catalog item to rewrite includes by namespace URI</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="system" type="VesXsdCatalogItemSystemType">
        <xs:annotation>
          <xs:documentation>Contains a single catalog item to rewrite includes by system ID</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>
  
  <xs:complexType name="VesXmlPreconditionType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="type" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>
              Defines the type of the precondition used.
              
              At least the value 'xpath' must be supported, to interpret the precondition as an XPath expression evaluating to a boolean.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="VesXsdType">
    <xs:annotation>
      <xs:documentation>
        Defines all the fields and constrains to deal with XML Schema validation artefacts.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="resource" type="VesResourceType">
        <xs:annotation>
          <xs:documentation>
            Coordinates of the artefacts that contain the main XML Schema definitions.
            Allowed types are: xsd, zip
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      
      <xs:element name="main" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            In case the referenced resource is a container (like zip), than this element
            defines the "root" XML schema that must include all the other required
            XML schemas with relative paths! 
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      
      <xs:element name="catalog" type="VesXsdCatalogType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Contains optional catalog entries required for resolution of referenced XML schemas during runtime execution
          </xs:documentation>
        </xs:annotation>
      </xs:element>
       
      <xs:element name="precondition" type="VesXmlPreconditionType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Optional precondition that MUST be fulfilled to execute this validation artefact on an XML instance 
          </xs:documentation>
        </xs:annotation>
      </xs:element>
     </xs:sequence>
  </xs:complexType>
  
  <xs:complexType name="VesOptionType">
    <xs:sequence>
      <!-- empty by purpose -->
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="value" type="xs:string" use="required"/>
  </xs:complexType>
  
  <xs:complexType name="VesInputType">
    <xs:sequence>
      <xs:element name="option" type="VesOptionType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Represents a single key-value-pair input parameter for Schematron/XSLT</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="VesSchematronType">
    <xs:sequence>
     <xs:element name="resource" type="VesResourceType">
        <xs:annotation>
          <xs:documentation>
            Coordinates of the artefacts that contain the main Schematron definitions.
            Allowed types are: sch, xslt
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      
      <xs:element name="engine" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The Schematron engine to be used for executing validations of this type.
            This setting is only needed for type 'sch'.
          </xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="precondition" type="VesXmlPreconditionType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Optional precondition that MUST be fulfilled to execute this validation artefact on an XML instance 
          </xs:documentation>
        </xs:annotation>
      </xs:element>
     
      <xs:element name="namespaces" type="VesNamespaceListType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            All the namespaces referenced by the XML schema and the proposed prefixes.
            Note: XML Schemas without namespace URI are NOT supported.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
     
      <xs:element name="input" type="VesInputType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Optional input parameters for executing the Schematron validation 
          </xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="output" type="VesOutputType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Optional output customization settings 
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  
  <xs:simpleType name="VesEdifactDirectoryType">
    <xs:annotation>
      <xs:documentation>
        Must be in the form "D96A" or "D01B".
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="D\d\d[ABC]" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="VesEdifactSyntaxVersionType">
    <xs:annotation>
      <xs:documentation>
        Must be in the form 1 to 4.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:integer">
      <xs:minInclusive value="1" />
      <xs:maxInclusive value="4" />
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="VesEdifactType">
    <xs:sequence>
      <xs:element name="directory" type="VesEdifactDirectoryType">
        <xs:annotation>
          <xs:documentation>The EDIFACT Directory version to use</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" type="xs:token">
        <xs:annotation>
          <xs:documentation>The EDIFACT message type, like 'DESADV'</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="syntaxVersion" type="VesEdifactSyntaxVersionType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The EDIFACT syntax version to be used. If none is provided, no special checks will be performed</xs:documentation>
        </xs:annotation>
      </xs:element>
      
      <!-- Do we need this, or is this handled by follow-up Schematrons??? -->
      <xs:element name="subset" type="xs:string" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Subsets to use. Order of elements must be from "broadest" to "most specific".</xs:documentation>
        </xs:annotation>
      </xs:element>
      
      <xs:element name="input" type="VesInputType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Optional input parameters for executing the Schematron validation 
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="VesType">
    <xs:sequence>
      <xs:group ref="VesCoordinateGroup">
        <xs:annotation>
          <xs:documentation>The structured VESID of the VES</xs:documentation>
        </xs:annotation>
      </xs:group>
      <xs:element name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>The display name of this VES</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="released" type="xs:date" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Optional date when the validation artefact was published or released</xs:documentation>
        </xs:annotation>
      </xs:element>
      
      <xs:element name="requires" type="VesRequiresType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>An optional reference to an existing validation artefact (VES) that must be executed prior to this validation artefact.</xs:documentation>
        </xs:annotation>
      </xs:element>
      
      <xs:choice>
        <xs:annotation>
          <xs:documentation>
            The supported list of validation artefact types is hard coded, as the requirements are very specific.
            Newly added validation languages require an update to this XML Schema.
          </xs:documentation>
        </xs:annotation>
        <!-- matches the ValidationArtefactTypeType -->
        <xs:element name="xsd" type="VesXsdType" />
        <xs:element name="schematron" type="VesSchematronType"/>
        <xs:element name="edifact" type="VesEdifactType"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="ves" type="VesType">
    <xs:annotation>
      <xs:documentation>
        The root element of the Validation Execution Set (VES) definition.
        A VES is always immutable. The immutable part of a VES is contained in the "ves-status-x.y" XSD.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:complexType name="VesStatusReplacementType">
    <xs:sequence>
      <xs:group ref="VesCoordinateGroup">
        <xs:annotation>
          <xs:documentation>
            The structured VESID of the replacement VES. Must have the same type as the source VES.
          </xs:documentation>
        </xs:annotation>
      </xs:group>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="VesStatusType">
    <xs:sequence>
      <xs:group ref="VesCoordinateGroup">
        <xs:annotation>
          <xs:documentation>The structured VESID of the VES</xs:documentation>
        </xs:annotation>
      </xs:group>
      <xs:element name="statusLastModified" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>
            The date and time (incl. time zone), when this status document was modified last.
            This can never be in the future.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="validFrom" type="xs:dateTime" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional point in time, when the validation artefact becomes mandatory.
            This element SHOULD contain timezone information. 
            If this element is missing, it means the validation artefact is valid "since forever".
            This field is theoretically mutable.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="validTo" type="xs:dateTime" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional point in time, until when the validation artefact may be used.
            This element SHOULD contain timezone information. 
            If this element is missing, it means the validation artefact is valid "until eternity".
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="deprecated" type="xs:boolean" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            This element provides the possibility to explicitly mark this object as "deprecated" and
            no longer usable.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="deprecationReason" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            This element provides the possibility to provide the reason for deprecation.
            The content should be provided in English language only. As free text. 
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="replacement" type="VesStatusReplacementType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            In case the element coordinates are deprecated, use this resource instead.
            This is primarily intended as a hint to the validation user to make sure he's using
            the correct validation rules.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="status" type="VesStatusType">
    <xs:annotation>
      <xs:documentation>
        The root element of the Validation Execution Set (VES) status definition.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
</xs:schema>
